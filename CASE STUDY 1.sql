-----***1. Display the number of states present in the LocationTable.*******------------

SELECT
State
FROM
dbo.Location


----*******2. How many products are of regular type?----------

SELECT
COUNT(Product)
FROM
dbo.PRODUCT WHERE Type = 'Regular'

---3. How much spending has been done on marketing of product ID 1?-------

SELECT
Total_Expenses, ProductId
FROM
dbo.fact WHERE ProductId=1

---4. What is the minimum sales of a product?---

SELECT
MIN(SALES)
FROM 
dbo.fact

----5. Display the max Cost of Good Sold (COGS).----

SELECT
MAX(COGS)
FROM 
dbo.fact



----6. Display the details of the product where product type is coffee.---

SELECT
*
FROM
dbo.PRODUCT WHERE Product_Type= 'Coffee'



---7. Display the details where total expenses are greater than 40.----

SELECT
*
FROM
dbo.fact WHERE Total_Expenses > 40

----8. What is the average sales in area code 719?----

SELECT
AVG(SALES)
FROM 
dbo.fact WHERE Area_Code =719



----9. Find out the total profit generated by Colorado state.------

SELECT
AVG(SALES)
FROM 
dbo.fact





----10. Display the average inventory for each product ID.------

SELECT
AVG(Inventory), ProductId
FROM 
dbo.fact
GROUP BY ProductId


----- 11. Display state in a sequential order in a Location Table.----

SELECT 
State
FROM
dbo.Location
ORDER BY State



---- 12. Display the average budget of the Product where the average budget margin should be greater than 100.---



SELECT
AVG(Budget_Margin), ProductId
FROM 
dbo.fact
GROUP BY ProductId
HAVING AVG( Budget_Margin) >100

---- 13. What is the total sales done on date 2010-01-01?-----

SELECT
SUM(Sales) ON DATE('2010-01-01')
FROM 
dbo.fact 


----14. Display the average total expense of each product ID on an individual date. ---

SELECT
AVG(Total_Expenses), ProductId , Date
FROM 
dbo.fact
GROUP BY ProductId, Date
ORDER BY ProductId, Date



---15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.---

SELECT
Date, P.ProductId, Product_Type, Product, Sales, Profit, State, L.Area_Code
FROM
dbo.PRODUCT AS P, dbo.Location AS L 
INNER JOIN dbo.fact AS F ON F.Area_Code=L.Area_Code

--- 16. Display the rank without any gap to show the sales wise rank.-----

SELECT *,
DENSE_RANK() OVER (ORDER BY SALES ASC) AS [SALES RANK]
FROM
dbo.fact
 

---- 17. Find the state wise profit and sales. -----

SELECT
Profit,Sales,L.State
FROM
dbo.fact AS F
INNER JOIN dbo.Location AS L ON F.Area_Code=L.Area_Code



---18. Find the state wise profit and sales along with the productname.----

SELECT
L.State, Profit , Sales,P.Product
FROM
dbo.fact AS F
INNER JOIN
dbo.Location AS L ON F.Area_Code=L.Area_Code
INNER JOIN
dbo.PRODUCT AS P ON F.ProductId=P.ProductId

---- 19. If there is an increase in sales of 5%, calculate the increasedsales.---


SELECT
Sales,Sales*0.05 as [Increased sales]
FROM
dbo.fact  


---- 20. Find the maximum profit along with the product ID and producttype.---

SELECT 
Max(Profit) AS [MAX_PROFIT], P.ProductId,P.Product_Type
FROM
dbo.fact AS F
INNER JOIN dbo.PRODUCT AS P ON F.ProductId=P.ProductId
GROUP BY P.ProductId,P.Product_Type    

----- 21. Create a stored procedure to fetch the result according to the product type from Product Table.----

CREATE PROCEDURE PROD_TYPE(@PRO_TYPE VARCHAR(30))
AS
SELECT
*
FROM dbo.PRODUCT 
WHERE Product_Type=@PRO_TYPE


 
EXECUTE PROD_TYPE @PRO_TYPE= 'TEA'


---- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.----
SELECT
Total_Expenses,IIF(Total_Expenses> 60 ,'profit','Loss')
FROM dbo.fact


----- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.----

SELECT
DATEPART(WEEK,Date) as WEEK, ProductId ,SUM(Sales) as [weekly Sales]
FROM dbo.Fact
GROUP BY ProductId, DATEPART(WEEK,Date) with Rollup



---- 24. Apply union and intersection operator on the tables which consist of attribute area code.-----

SELECT
Area_Code
FROM dbo.fact
Union 
SELECT
Area_Code
FROM dbo.Location


SELECT
Area_Code
FROM dbo.fact
INTERSECT
SELECT
Area_Code
FROM dbo.Location

--- 25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.----

SELECT* FROM dbo.PRODUCT

CREATE FUNCTION SELECT_Product_Type (@Product_Type as VARCHAR(30)) 
RETURNS TABLE
AS
RETURN 
(
SELECT * FROM dbo.PRODUCT WHERE Product_Type = @Product_Type
)


SELECT * FROM dbo.SELECT_Product_Type('Tea')



--- 26. Change the product type from coffee to tea where product ID is 1 and undo it.----

UPDATE dbo.PRODUCT
SET Product_Type = 'Coffee' WHERE ProductId =1


BEGIN TRANSACTION
UPDATE dbo.PRODUCT
SET Product_Type = 'Coffee' WHERE ProductId =1
COMMIT;
--- 27. Display the date, product ID and sales where total expenses are between 100 to 200.----

SELECT
Date, ProductId, Sales, Total_Expenses
FROM 
DBO.fact  WHERE Total_Expenses between 100 and 200 

--- 28. Delete the records in the Product Table for regular type.----

DELETE FROM dbo.PRODUCT WHERE (Type= 'Regular')

---- 29. Display the ASCII value of the fifth character from the columnProduct-----

SELECT
ASCII(SUBSTRING(Product,5,1)),Product
FROM 
dbo.PRODUCT




